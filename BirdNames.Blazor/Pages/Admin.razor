@page "/admin"
@using BirdNames.Core.Interfaces
@using BirdNames.Core.Settings
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Hosting


@implements IDisposable

@inject IWebHostEnvironment Environment
@inject IOptions<BirdNamesCoreSettings> CoreSettings;
@inject ISettingsService SettingsService
@inject NotificationService NotificationService
@inject IBirdNamesXmlProcessorService BirdNamesFx

@inject ILogger<Admin> Logger

<h3>BirdNames Data Administration</h3>

<div class="row">
  <hr />
  <div class="col-md-12">
    Upload BirdNames Xml (https://www.worldbirdnames.org/new/ioc-lists/master-list-2/)
  </div>
</div>

@if (!_isLoggedIn)
{
  <div class="row">
    <hr />
    <div class="col-md-12">
      <RadzenLabel Component="adminPassword">Admin Password: <b><i>{Enter} or {Tab} to continue</i></b></RadzenLabel>
      <RadzenPassword @bind-Value=@_adminPassword Style="width:100%" Name="adminPassword" />
      <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Login" Click=@_login Disabled=@(string.IsNullOrEmpty(_adminPassword)) />
    </div>
  </div>
  <div class="row">
    <div class="col-md-12">
      <pre style="color:red">@_loginError</pre>
    </div>
  </div>
}


<div class="row">
  <hr />
  <div class="col-md-12">
    <RadzenLabel Text="IOC World Bird List (Xml):" />
    @if(_isLoggedIn){
      <InputFile OnChange="_fileUploadChanged" ></InputFile>
    }
  </div>
</div>
<div class="row">
  <div class="col-md-4">
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Upload" Click="@(async ()=>await _uploadXmlFile())" Disabled="@(!_allowXmlUpload && !_isLoggedIn)" />
  </div>
  <div class="col-md-8">
    <pre style="color:red">@_xmlFileError</pre>
  </div>
</div>

@code {
  bool _isLoggedIn = false;
  string _adminPassword = string.Empty;
  string? _loginError;

  const string XmlTempFile = "temp/ioc.xml";
  string? _xmlFileError;
  bool _allowXmlUpload = false;


  private void _login()
  {
    _isLoggedIn = false;
    _loginError = null;
    var password = SettingsService.Unprotect(CoreSettings.Value.AdminPassword!);
    if (password == _adminPassword)
    {
      _isLoggedIn = true;
      _adminPassword = string.Empty;
    }
    else
    {
      NotificationService.Notify(NotificationSeverity.Error, "Login Error", "Invalid password");
      _loginError = "Invalid password";
    }
  }

  private string _getTempXmlFilePath()
  {
    return Path.Combine(Path.Combine(Environment.ContentRootPath, XmlTempFile));
  }
  private async Task _uploadXmlFile()
  {
    var tempXmlFilePath = _getTempXmlFilePath();
    try
    {
      if (!File.Exists(tempXmlFilePath))
        throw new FileNotFoundException("Xml file not found", tempXmlFilePath);

      await using var fileStream = File.OpenRead(tempXmlFilePath);
      await BirdNamesFx.ProcessXml(fileStream);
      fileStream.Close();
      NotificationService.Notify(NotificationSeverity.Success, "Process Complete", "IOC World Bird List uploaded and processed");
      _xmlFileError = "Done";
      await Task.Yield();
    }
    catch (Exception e)
    {
      Logger.LogError(e, $"Xml File Process Error: {e.Message}");
      NotificationService.Notify(NotificationSeverity.Error, "Process Error", e.Message);
      _xmlFileError = e.Message;
      await Task.Yield();
    }
    finally
    {
      if (File.Exists(tempXmlFilePath))
        File.Delete(tempXmlFilePath);
    }
  }

  private const int _maxFileSize = 1024 * 1024 * 10;//10MB;
  private async Task _fileUploadChanged(InputFileChangeEventArgs args)
  {
    _xmlFileError = null;
    _allowXmlUpload = false;
    var tempXmlFilePath = _getTempXmlFilePath();

    try
    {
      if (args.File.Size > _maxFileSize)
      {
        _xmlFileError = $"File size too large: {args.File.Size}>{_maxFileSize}";
        return;
      }

      if (args.File.ContentType != "text/xml")
      {
        _xmlFileError = $"Invalid file type: {args.File.ContentType}";
        return;
      }

      await using var file = File.Create(tempXmlFilePath);
      await args.File.OpenReadStream(int.MaxValue).CopyToAsync(file);
      file.Close();

      _allowXmlUpload = true;
      await InvokeAsync(StateHasChanged);

      await Task.Yield();
      NotificationService.Notify(NotificationSeverity.Info, "File Uploaded", $"File: {args.File.Name}\nSize: {args.File.Size}\nType: {args.File.ContentType}");
    }
    catch (Exception e)
    {
      Logger.LogError(e, $"Xml File Upload Error: {e.Message}");
      _allowXmlUpload = false;
      NotificationService.Notify(NotificationSeverity.Error, "Upload Error", e.Message);
      _xmlFileError = e.Message;
    }
  }

  #region Implementation of IDisposable

  public void Dispose()
  {
    BirdNamesFx?.Dispose();
  }

  #endregion

}
